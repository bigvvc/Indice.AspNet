/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IIdentityApiService {
    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.ClaimTypeInfo objects containing the total number of claim types in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param filter_Required (optional) Determines whether this claim is required to create new users.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getClaimTypes(filter_Required?: boolean | undefined, page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<ClaimTypeInfoResultSet>;
    /**
     * Creates a new claim type.
     * @param body (optional) Contains info about the claim to be created.
     * @return Created
     */
    createClaimType(body?: CreateClaimTypeRequest | undefined): Observable<ClaimTypeInfo>;
    /**
     * Gets a claim type by it's unique id.
     * @param id The identifier of the claim type.
     * @return OK
     */
    getClaimType(id: string): Observable<ClaimTypeInfo>;
    /**
     * Updates an existing claim type.
     * @param id The id of the claim to update.
     * @param body (optional) Contains info about the claim to update.
     * @return OK
     */
    updateClaimType(id: string, body?: UpdateClaimTypeRequest | undefined): Observable<ClaimTypeInfo>;
    /**
     * Permanently deletes an existing claim type.
     * @param id The id of the claim to delete.
     * @return OK
     */
    deleteClaimType(id: string): Observable<void>;
    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.ClientInfo objects containing the total number of clients in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getClients(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<ClientInfoResultSet>;
    /**
     * Creates a new client.
     * @param body (optional) Contains info about the client to be created.
     * @return Created
     */
    createClient(body?: CreateClientRequest | undefined): Observable<ClientInfo>;
    /**
     * Gets a client by it's unique id.
     * @param clientId The identifier of the client.
     * @return OK
     */
    getClient(clientId: string): Observable<SingleClientInfo>;
    /**
     * Updates an existing client.
     * @param clientId The id of the client.
     * @param body (optional) Contains info about the client to be updated.
     * @return Ok
     */
    updateClient(clientId: string, body?: UpdateClientRequest | undefined): Observable<void>;
    /**
     * Permanently deletes an existing client.
     * @param clientId The id of the client to delete.
     * @return OK
     */
    deleteClient(clientId: string): Observable<void>;
    /**
     * Adds a claim for the specified client.
     * @param clientId The id of the client.
     * @param body (optional) The claim to add.
     * @return Created
     */
    addClientClaim(clientId: string, body?: CreateClaimRequest | undefined): Observable<ClaimInfo>;
    /**
     * Adds an identity resource to the specified client.
     * @param clientId The id of the client.
     * @param body (optional) The API or identity resources to add.
     * @return Success
     */
    addClientResources(clientId: string, body?: string[] | undefined): Observable<void>;
    /**
     * Removes an identity resource from the specified client.
     * @param clientId The id of the client.
     * @param resource The id of the resource to delete.
     * @return Success
     */
    deleteClientResource(clientId: string, resource: string): Observable<void>;
    /**
     * Displays blog posts from the official IdentityServer blog.
     * @param page (optional) 
     * @param size (optional) 
     * @return OK
     */
    getNews(page?: number | undefined, size?: number | undefined): Observable<BlogItemInfoResultSet>;
    /**
     * Gets some useful information as a summary of the system.
     * @return Success
     */
    getSystemSummary(): Observable<SummaryInfo>;
    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.IdentityResourceInfo objects containing the total number of identity resources in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getIdentityResources(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<IdentityResourceInfoResultSet>;
    /**
     * Creates a new identity resource.
     * @param body (optional) Contains info about the identity resource to be created.
     * @return Created
     */
    createIdentityResource(body?: CreateApiResourceRequest | undefined): Observable<IdentityResourceInfo>;
    /**
     * Gets an identity resource by it's unique id.
     * @param resourceId The identifier of the identity resource.
     * @return OK
     */
    getIdentityResource(resourceId: number): Observable<IdentityResourceInfo>;
    /**
     * Permanently deletes an identity resource.
     * @param resourceId The id of the identity resource to delete.
     * @return OK
     */
    deleteIdentityResource(resourceId: number): Observable<void>;
    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.ApiResourceInfo objects containing the total number of API resources in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getApiResources(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<ApiResourceInfoResultSet>;
    /**
     * Creates a new API resource.
     * @param body (optional) Contains info about the API resource to be created.
     * @return Created
     */
    createApiResource(body?: CreateApiResourceRequest | undefined): Observable<ApiResourceInfo>;
    /**
     * Gets an API resource by it's unique id.
     * @param resourceId The identifier of the API resource.
     * @return OK
     */
    getApiResource(resourceId: number): Observable<ApiResourceInfo>;
    /**
     * Updates an API resource.
     * @param resourceId The identifier of the API resource.
     * @param body (optional) Contains info about the API resource to be updated.
     * @return Ok
     */
    updateApiResource(resourceId: number, body?: UpdateApiResourceRequest | undefined): Observable<void>;
    /**
     * Adds claims to an API resource.
     * @param resourceId The identifier of the API resource.
     * @param body (optional) The API or identity resources to add.
     * @return Ok
     */
    addApiResourceClaims(resourceId: number, body?: string[] | undefined): Observable<void>;
    /**
     * Removes a specified claim from an API resource.
     * @param resourceId The identifier of the API resource.
     * @param claim The identifier of the API resource claim to remove.
     * @return Ok
     */
    deleteApiResourceClaim(resourceId: number, claim: string): Observable<void>;
    /**
     * Adds a new scope to an existing API resource.
     * @param resourceId The identifier of the API resource.
     * @param body (optional) Contains info about the API scope to be created.
     * @return Created
     */
    addApiResourceScope(resourceId: number, body?: CreateApiScopeRequest | undefined): Observable<ScopeInfo>;
    /**
     * Updates a specified scope of an API resource.
     * @param resourceId The identifier of the API resource.
     * @param scopeId The identifier of the API resource.
     * @param body (optional) Contains info about the API scope to be updated.
     * @return Ok
     */
    updateApiResourceScope(resourceId: number, scopeId: number, body?: UpdateApiScopeRequest | undefined): Observable<void>;
    /**
     * Deletes a specified scope from an API resource.
     * @param resourceId The identifier of the API resource.
     * @param scopeId The identifier of the API resource scope.
     * @return Ok
     */
    deleteApiResourceScope(resourceId: number, scopeId: number): Observable<void>;
    /**
     * Adds claims to an API scope of a protected resource.
     * @param resourceId The identifier of the API resource.
     * @param scopeId The identifier of the API resource scope.
     * @param body (optional) The claims to add to the scope.
     * @return Ok
     */
    addApiResourceScopeClaims(resourceId: number, scopeId: number, body?: string[] | undefined): Observable<void>;
    /**
     * Deletes a claim from an API scope of a protected resource.
     * @param resourceId The identifier of the API resource.
     * @param scopeId The identifier of the API resource scope.
     * @param claim The claim to remove from the scope.
     * @return Ok
     */
    deleteApiResourceScopeClaim(resourceId: number, scopeId: number, claim: string): Observable<void>;
    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.ScopeInfo objects containing the total number of API scopes in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getApiScopes(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<ScopeInfoResultSet>;
    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.RoleInfo objects containing the total number of roles in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getRoles(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<RoleInfoResultSet>;
    /**
     * Creates a new role.
     * @param body (optional) Contains info about the role to be created.
     * @return Created
     */
    createRole(body?: CreateRoleRequest | undefined): Observable<RoleInfo>;
    /**
     * Gets a role by it's unique id.
     * @param id The identifier of the role.
     * @return OK
     */
    getRole(id: string): Observable<RoleInfo>;
    /**
     * Updates an existing role.
     * @param id The id of the role to update.
     * @param body (optional) Contains info about the role to update.
     * @return OK
     */
    updateRole(id: string, body?: UpdateRoleRequest | undefined): Observable<RoleInfo>;
    /**
     * Permanently deletes a role.
     * @param id The id of the role to delete.
     * @return OK
     */
    deleteRole(id: string): Observable<void>;
    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.UserInfo objects containing the total number of users in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getUsers(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<UserInfoResultSet>;
    /**
     * Creates a new user.
     * @param body (optional) Contains info about the user to be created.
     * @return Created
     */
    createUser(body?: CreateUserRequest | undefined): Observable<SingleUserInfo>;
    /**
     * Gets a user by it's unique id.
     * @param userId The identifier of the user.
     * @return OK
     */
    getUser(userId: string): Observable<SingleUserInfo>;
    /**
     * Updates an existing user.
     * @param userId The id of the user to update.
     * @param body (optional) Contains info about the user to update.
     * @return OK
     */
    updateUser(userId: string, body?: UpdateUserRequest | undefined): Observable<SingleUserInfo>;
    /**
     * Permanently deletes a user.
     * @param userId The id of the user to delete.
     * @return OK
     */
    deleteUser(userId: string): Observable<void>;
    /**
     * Gets a list of the applications the user has given consent to or currently has IdentityServer side tokens for.
     * @param userId The id of the user.
     * @return OK
     */
    getUserApplications(userId: string): Observable<UserClientInfoResultSet>;
    /**
     * Adds a claim for the specified user.
     * @param userId The id of the user.
     * @param body (optional) The claim to add.
     * @return Created
     */
    addUserClaim(userId: string, body?: CreateClaimRequest | undefined): Observable<ClaimInfo>;
    /**
     * Gets a specified claim for a given user.
     * @param userId The id of the user.
     * @param claimId The id of the claim.
     * @return OK
     */
    getUserClaim(userId: string, claimId: number): Observable<BasicClaimInfo>;
    /**
     * Updates an existing user claim.
     * @param userId The id of the user.
     * @param claimId The id of the user claim.
     * @param body (optional) Contains info about the user claim to update.
     * @return OK
     */
    updateUserClaim(userId: string, claimId: number, body?: UpdateUserClaimRequest | undefined): Observable<ClaimInfo>;
    /**
     * Permanently deletes a specified claim from a user.
     * @param userId The id of the user.
     * @param claimId The id of the claim to delete.
     * @return OK
     */
    deleteUserClaim(userId: string, claimId: number): Observable<void>;
    /**
     * Adds a new role to the specified user.
     * @param userId The id of the user.
     * @param roleId The id of the role.
     * @return OK
     */
    addUserRole(userId: string, roleId: string): Observable<void>;
    /**
     * Removes an existing role from the specified user.
     * @param userId The id of the user.
     * @param roleId The id of the role.
     * @return OK
     */
    deleteUserRole(userId: string, roleId: string): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class IdentityApiService implements IIdentityApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.ClaimTypeInfo objects containing the total number of claim types in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param filter_Required (optional) Determines whether this claim is required to create new users.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getClaimTypes(filter_Required?: boolean | undefined, page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<ClaimTypeInfoResultSet> {
        let url_ = this.baseUrl + "/api/claim-types?";
        if (filter_Required === null)
            throw new Error("The parameter 'filter_Required' cannot be null.");
        else if (filter_Required !== undefined)
            url_ += "Filter.Required=" + encodeURIComponent("" + filter_Required) + "&"; 
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&"; 
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClaimTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClaimTypes(<any>response_);
                } catch (e) {
                    return <Observable<ClaimTypeInfoResultSet>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClaimTypeInfoResultSet>><any>_observableThrow(response_);
        }));
    }

    protected processGetClaimTypes(response: HttpResponseBase): Observable<ClaimTypeInfoResultSet> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimTypeInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClaimTypeInfoResultSet>(<any>null);
    }

    /**
     * Creates a new claim type.
     * @param body (optional) Contains info about the claim to be created.
     * @return Created
     */
    createClaimType(body?: CreateClaimTypeRequest | undefined): Observable<ClaimTypeInfo> {
        let url_ = this.baseUrl + "/api/claim-types";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateClaimType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateClaimType(<any>response_);
                } catch (e) {
                    return <Observable<ClaimTypeInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClaimTypeInfo>><any>_observableThrow(response_);
        }));
    }

    protected processCreateClaimType(response: HttpResponseBase): Observable<ClaimTypeInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ClaimTypeInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClaimTypeInfo>(<any>null);
    }

    /**
     * Gets a claim type by it's unique id.
     * @param id The identifier of the claim type.
     * @return OK
     */
    getClaimType(id: string): Observable<ClaimTypeInfo> {
        let url_ = this.baseUrl + "/api/claim-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClaimType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClaimType(<any>response_);
                } catch (e) {
                    return <Observable<ClaimTypeInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClaimTypeInfo>><any>_observableThrow(response_);
        }));
    }

    protected processGetClaimType(response: HttpResponseBase): Observable<ClaimTypeInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimTypeInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClaimTypeInfo>(<any>null);
    }

    /**
     * Updates an existing claim type.
     * @param id The id of the claim to update.
     * @param body (optional) Contains info about the claim to update.
     * @return OK
     */
    updateClaimType(id: string, body?: UpdateClaimTypeRequest | undefined): Observable<ClaimTypeInfo> {
        let url_ = this.baseUrl + "/api/claim-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateClaimType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateClaimType(<any>response_);
                } catch (e) {
                    return <Observable<ClaimTypeInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClaimTypeInfo>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateClaimType(response: HttpResponseBase): Observable<ClaimTypeInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimTypeInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClaimTypeInfo>(<any>null);
    }

    /**
     * Permanently deletes an existing claim type.
     * @param id The id of the claim to delete.
     * @return OK
     */
    deleteClaimType(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/claim-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteClaimType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteClaimType(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteClaimType(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.ClientInfo objects containing the total number of clients in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getClients(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<ClientInfoResultSet> {
        let url_ = this.baseUrl + "/api/clients?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&"; 
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClients(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClients(<any>response_);
                } catch (e) {
                    return <Observable<ClientInfoResultSet>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientInfoResultSet>><any>_observableThrow(response_);
        }));
    }

    protected processGetClients(response: HttpResponseBase): Observable<ClientInfoResultSet> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientInfoResultSet>(<any>null);
    }

    /**
     * Creates a new client.
     * @param body (optional) Contains info about the client to be created.
     * @return Created
     */
    createClient(body?: CreateClientRequest | undefined): Observable<ClientInfo> {
        let url_ = this.baseUrl + "/api/clients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateClient(<any>response_);
                } catch (e) {
                    return <Observable<ClientInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientInfo>><any>_observableThrow(response_);
        }));
    }

    protected processCreateClient(response: HttpResponseBase): Observable<ClientInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ClientInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientInfo>(<any>null);
    }

    /**
     * Gets a client by it's unique id.
     * @param clientId The identifier of the client.
     * @return OK
     */
    getClient(clientId: string): Observable<SingleClientInfo> {
        let url_ = this.baseUrl + "/api/clients/{clientId}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClient(<any>response_);
                } catch (e) {
                    return <Observable<SingleClientInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<SingleClientInfo>><any>_observableThrow(response_);
        }));
    }

    protected processGetClient(response: HttpResponseBase): Observable<SingleClientInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SingleClientInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SingleClientInfo>(<any>null);
    }

    /**
     * Updates an existing client.
     * @param clientId The id of the client.
     * @param body (optional) Contains info about the client to be updated.
     * @return Ok
     */
    updateClient(clientId: string, body?: UpdateClientRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{clientId}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateClient(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateClient(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Permanently deletes an existing client.
     * @param clientId The id of the client to delete.
     * @return OK
     */
    deleteClient(clientId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{clientId}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteClient(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteClient(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Adds a claim for the specified client.
     * @param clientId The id of the client.
     * @param body (optional) The claim to add.
     * @return Created
     */
    addClientClaim(clientId: string, body?: CreateClaimRequest | undefined): Observable<ClaimInfo> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/claims";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddClientClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddClientClaim(<any>response_);
                } catch (e) {
                    return <Observable<ClaimInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClaimInfo>><any>_observableThrow(response_);
        }));
    }

    protected processAddClientClaim(response: HttpResponseBase): Observable<ClaimInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ClaimInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClaimInfo>(<any>null);
    }

    /**
     * Adds an identity resource to the specified client.
     * @param clientId The id of the client.
     * @param body (optional) The API or identity resources to add.
     * @return Success
     */
    addClientResources(clientId: string, body?: string[] | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/resources";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddClientResources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddClientResources(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddClientResources(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Removes an identity resource from the specified client.
     * @param clientId The id of the client.
     * @param resource The id of the resource to delete.
     * @return Success
     */
    deleteClientResource(clientId: string, resource: string): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/resources/{resource}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        if (resource === undefined || resource === null)
            throw new Error("The parameter 'resource' must be defined.");
        url_ = url_.replace("{resource}", encodeURIComponent("" + resource)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteClientResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteClientResource(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteClientResource(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Displays blog posts from the official IdentityServer blog.
     * @param page (optional) 
     * @param size (optional) 
     * @return OK
     */
    getNews(page?: number | undefined, size?: number | undefined): Observable<BlogItemInfoResultSet> {
        let url_ = this.baseUrl + "/api/dashboard/news?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&"; 
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "size=" + encodeURIComponent("" + size) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNews(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNews(<any>response_);
                } catch (e) {
                    return <Observable<BlogItemInfoResultSet>><any>_observableThrow(e);
                }
            } else
                return <Observable<BlogItemInfoResultSet>><any>_observableThrow(response_);
        }));
    }

    protected processGetNews(response: HttpResponseBase): Observable<BlogItemInfoResultSet> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BlogItemInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BlogItemInfoResultSet>(<any>null);
    }

    /**
     * Gets some useful information as a summary of the system.
     * @return Success
     */
    getSystemSummary(): Observable<SummaryInfo> {
        let url_ = this.baseUrl + "/api/dashboard/summary";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSystemSummary(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSystemSummary(<any>response_);
                } catch (e) {
                    return <Observable<SummaryInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<SummaryInfo>><any>_observableThrow(response_);
        }));
    }

    protected processGetSystemSummary(response: HttpResponseBase): Observable<SummaryInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SummaryInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SummaryInfo>(<any>null);
    }

    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.IdentityResourceInfo objects containing the total number of identity resources in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getIdentityResources(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<IdentityResourceInfoResultSet> {
        let url_ = this.baseUrl + "/api/resources/identity?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&"; 
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetIdentityResources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIdentityResources(<any>response_);
                } catch (e) {
                    return <Observable<IdentityResourceInfoResultSet>><any>_observableThrow(e);
                }
            } else
                return <Observable<IdentityResourceInfoResultSet>><any>_observableThrow(response_);
        }));
    }

    protected processGetIdentityResources(response: HttpResponseBase): Observable<IdentityResourceInfoResultSet> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IdentityResourceInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IdentityResourceInfoResultSet>(<any>null);
    }

    /**
     * Creates a new identity resource.
     * @param body (optional) Contains info about the identity resource to be created.
     * @return Created
     */
    createIdentityResource(body?: CreateApiResourceRequest | undefined): Observable<IdentityResourceInfo> {
        let url_ = this.baseUrl + "/api/resources/identity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateIdentityResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateIdentityResource(<any>response_);
                } catch (e) {
                    return <Observable<IdentityResourceInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<IdentityResourceInfo>><any>_observableThrow(response_);
        }));
    }

    protected processCreateIdentityResource(response: HttpResponseBase): Observable<IdentityResourceInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = IdentityResourceInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IdentityResourceInfo>(<any>null);
    }

    /**
     * Gets an identity resource by it's unique id.
     * @param resourceId The identifier of the identity resource.
     * @return OK
     */
    getIdentityResource(resourceId: number): Observable<IdentityResourceInfo> {
        let url_ = this.baseUrl + "/api/resources/identity/{resourceId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetIdentityResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIdentityResource(<any>response_);
                } catch (e) {
                    return <Observable<IdentityResourceInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<IdentityResourceInfo>><any>_observableThrow(response_);
        }));
    }

    protected processGetIdentityResource(response: HttpResponseBase): Observable<IdentityResourceInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IdentityResourceInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IdentityResourceInfo>(<any>null);
    }

    /**
     * Permanently deletes an identity resource.
     * @param resourceId The id of the identity resource to delete.
     * @return OK
     */
    deleteIdentityResource(resourceId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/identity/{resourceId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteIdentityResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteIdentityResource(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteIdentityResource(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.ApiResourceInfo objects containing the total number of API resources in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getApiResources(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<ApiResourceInfoResultSet> {
        let url_ = this.baseUrl + "/api/resources/protected?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&"; 
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetApiResources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApiResources(<any>response_);
                } catch (e) {
                    return <Observable<ApiResourceInfoResultSet>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResourceInfoResultSet>><any>_observableThrow(response_);
        }));
    }

    protected processGetApiResources(response: HttpResponseBase): Observable<ApiResourceInfoResultSet> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResourceInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResourceInfoResultSet>(<any>null);
    }

    /**
     * Creates a new API resource.
     * @param body (optional) Contains info about the API resource to be created.
     * @return Created
     */
    createApiResource(body?: CreateApiResourceRequest | undefined): Observable<ApiResourceInfo> {
        let url_ = this.baseUrl + "/api/resources/protected";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateApiResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateApiResource(<any>response_);
                } catch (e) {
                    return <Observable<ApiResourceInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResourceInfo>><any>_observableThrow(response_);
        }));
    }

    protected processCreateApiResource(response: HttpResponseBase): Observable<ApiResourceInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ApiResourceInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResourceInfo>(<any>null);
    }

    /**
     * Gets an API resource by it's unique id.
     * @param resourceId The identifier of the API resource.
     * @return OK
     */
    getApiResource(resourceId: number): Observable<ApiResourceInfo> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetApiResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApiResource(<any>response_);
                } catch (e) {
                    return <Observable<ApiResourceInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResourceInfo>><any>_observableThrow(response_);
        }));
    }

    protected processGetApiResource(response: HttpResponseBase): Observable<ApiResourceInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResourceInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResourceInfo>(<any>null);
    }

    /**
     * Updates an API resource.
     * @param resourceId The identifier of the API resource.
     * @param body (optional) Contains info about the API resource to be updated.
     * @return Ok
     */
    updateApiResource(resourceId: number, body?: UpdateApiResourceRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateApiResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateApiResource(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateApiResource(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Adds claims to an API resource.
     * @param resourceId The identifier of the API resource.
     * @param body (optional) The API or identity resources to add.
     * @return Ok
     */
    addApiResourceClaims(resourceId: number, body?: string[] | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/claims";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddApiResourceClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddApiResourceClaims(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddApiResourceClaims(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Removes a specified claim from an API resource.
     * @param resourceId The identifier of the API resource.
     * @param claim The identifier of the API resource claim to remove.
     * @return Ok
     */
    deleteApiResourceClaim(resourceId: number, claim: string): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/claims/{claim}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId)); 
        if (claim === undefined || claim === null)
            throw new Error("The parameter 'claim' must be defined.");
        url_ = url_.replace("{claim}", encodeURIComponent("" + claim)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteApiResourceClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteApiResourceClaim(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteApiResourceClaim(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Adds a new scope to an existing API resource.
     * @param resourceId The identifier of the API resource.
     * @param body (optional) Contains info about the API scope to be created.
     * @return Created
     */
    addApiResourceScope(resourceId: number, body?: CreateApiScopeRequest | undefined): Observable<ScopeInfo> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/scopes";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddApiResourceScope(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddApiResourceScope(<any>response_);
                } catch (e) {
                    return <Observable<ScopeInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<ScopeInfo>><any>_observableThrow(response_);
        }));
    }

    protected processAddApiResourceScope(response: HttpResponseBase): Observable<ScopeInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ScopeInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ScopeInfo>(<any>null);
    }

    /**
     * Updates a specified scope of an API resource.
     * @param resourceId The identifier of the API resource.
     * @param scopeId The identifier of the API resource.
     * @param body (optional) Contains info about the API scope to be updated.
     * @return Ok
     */
    updateApiResourceScope(resourceId: number, scopeId: number, body?: UpdateApiScopeRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/scopes/{scopeId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId)); 
        if (scopeId === undefined || scopeId === null)
            throw new Error("The parameter 'scopeId' must be defined.");
        url_ = url_.replace("{scopeId}", encodeURIComponent("" + scopeId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateApiResourceScope(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateApiResourceScope(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateApiResourceScope(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Deletes a specified scope from an API resource.
     * @param resourceId The identifier of the API resource.
     * @param scopeId The identifier of the API resource scope.
     * @return Ok
     */
    deleteApiResourceScope(resourceId: number, scopeId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/scopes/{scopeId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId)); 
        if (scopeId === undefined || scopeId === null)
            throw new Error("The parameter 'scopeId' must be defined.");
        url_ = url_.replace("{scopeId}", encodeURIComponent("" + scopeId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteApiResourceScope(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteApiResourceScope(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteApiResourceScope(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ScopeInfo.fromJS(resultData201);
            return throwException("Success", status, _responseText, _headers, result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Adds claims to an API scope of a protected resource.
     * @param resourceId The identifier of the API resource.
     * @param scopeId The identifier of the API resource scope.
     * @param body (optional) The claims to add to the scope.
     * @return Ok
     */
    addApiResourceScopeClaims(resourceId: number, scopeId: number, body?: string[] | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/scopes/{scopeId}/claims";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId)); 
        if (scopeId === undefined || scopeId === null)
            throw new Error("The parameter 'scopeId' must be defined.");
        url_ = url_.replace("{scopeId}", encodeURIComponent("" + scopeId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddApiResourceScopeClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddApiResourceScopeClaims(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddApiResourceScopeClaims(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Deletes a claim from an API scope of a protected resource.
     * @param resourceId The identifier of the API resource.
     * @param scopeId The identifier of the API resource scope.
     * @param claim The claim to remove from the scope.
     * @return Ok
     */
    deleteApiResourceScopeClaim(resourceId: number, scopeId: number, claim: string): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/scopes/{scopeId}/claims/{claim}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId)); 
        if (scopeId === undefined || scopeId === null)
            throw new Error("The parameter 'scopeId' must be defined.");
        url_ = url_.replace("{scopeId}", encodeURIComponent("" + scopeId)); 
        if (claim === undefined || claim === null)
            throw new Error("The parameter 'claim' must be defined.");
        url_ = url_.replace("{claim}", encodeURIComponent("" + claim)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteApiResourceScopeClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteApiResourceScopeClaim(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteApiResourceScopeClaim(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.ScopeInfo objects containing the total number of API scopes in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getApiScopes(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<ScopeInfoResultSet> {
        let url_ = this.baseUrl + "/api/resources/protected/scopes?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&"; 
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetApiScopes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApiScopes(<any>response_);
                } catch (e) {
                    return <Observable<ScopeInfoResultSet>><any>_observableThrow(e);
                }
            } else
                return <Observable<ScopeInfoResultSet>><any>_observableThrow(response_);
        }));
    }

    protected processGetApiScopes(response: HttpResponseBase): Observable<ScopeInfoResultSet> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ScopeInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ScopeInfoResultSet>(<any>null);
    }

    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.RoleInfo objects containing the total number of roles in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getRoles(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<RoleInfoResultSet> {
        let url_ = this.baseUrl + "/api/roles?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&"; 
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoles(<any>response_);
                } catch (e) {
                    return <Observable<RoleInfoResultSet>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoleInfoResultSet>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoles(response: HttpResponseBase): Observable<RoleInfoResultSet> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoleInfoResultSet>(<any>null);
    }

    /**
     * Creates a new role.
     * @param body (optional) Contains info about the role to be created.
     * @return Created
     */
    createRole(body?: CreateRoleRequest | undefined): Observable<RoleInfo> {
        let url_ = this.baseUrl + "/api/roles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRole(<any>response_);
                } catch (e) {
                    return <Observable<RoleInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoleInfo>><any>_observableThrow(response_);
        }));
    }

    protected processCreateRole(response: HttpResponseBase): Observable<RoleInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = RoleInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoleInfo>(<any>null);
    }

    /**
     * Gets a role by it's unique id.
     * @param id The identifier of the role.
     * @return OK
     */
    getRole(id: string): Observable<RoleInfo> {
        let url_ = this.baseUrl + "/api/roles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRole(<any>response_);
                } catch (e) {
                    return <Observable<RoleInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoleInfo>><any>_observableThrow(response_);
        }));
    }

    protected processGetRole(response: HttpResponseBase): Observable<RoleInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoleInfo>(<any>null);
    }

    /**
     * Updates an existing role.
     * @param id The id of the role to update.
     * @param body (optional) Contains info about the role to update.
     * @return OK
     */
    updateRole(id: string, body?: UpdateRoleRequest | undefined): Observable<RoleInfo> {
        let url_ = this.baseUrl + "/api/roles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRole(<any>response_);
                } catch (e) {
                    return <Observable<RoleInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoleInfo>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateRole(response: HttpResponseBase): Observable<RoleInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoleInfo>(<any>null);
    }

    /**
     * Permanently deletes a role.
     * @param id The id of the role to delete.
     * @return OK
     */
    deleteRole(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/roles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteRole(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteRole(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Returns a list of Indice.AspNetCore.Identity.Features.UserInfo objects containing the total number of users in the database and the data filtered according to the provided Indice.Types.ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getUsers(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<UserInfoResultSet> {
        let url_ = this.baseUrl + "/api/users?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&"; 
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsers(<any>response_);
                } catch (e) {
                    return <Observable<UserInfoResultSet>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserInfoResultSet>><any>_observableThrow(response_);
        }));
    }

    protected processGetUsers(response: HttpResponseBase): Observable<UserInfoResultSet> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserInfoResultSet>(<any>null);
    }

    /**
     * Creates a new user.
     * @param body (optional) Contains info about the user to be created.
     * @return Created
     */
    createUser(body?: CreateUserRequest | undefined): Observable<SingleUserInfo> {
        let url_ = this.baseUrl + "/api/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateUser(<any>response_);
                } catch (e) {
                    return <Observable<SingleUserInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<SingleUserInfo>><any>_observableThrow(response_);
        }));
    }

    protected processCreateUser(response: HttpResponseBase): Observable<SingleUserInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = SingleUserInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SingleUserInfo>(<any>null);
    }

    /**
     * Gets a user by it's unique id.
     * @param userId The identifier of the user.
     * @return OK
     */
    getUser(userId: string): Observable<SingleUserInfo> {
        let url_ = this.baseUrl + "/api/users/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUser(<any>response_);
                } catch (e) {
                    return <Observable<SingleUserInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<SingleUserInfo>><any>_observableThrow(response_);
        }));
    }

    protected processGetUser(response: HttpResponseBase): Observable<SingleUserInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SingleUserInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SingleUserInfo>(<any>null);
    }

    /**
     * Updates an existing user.
     * @param userId The id of the user to update.
     * @param body (optional) Contains info about the user to update.
     * @return OK
     */
    updateUser(userId: string, body?: UpdateUserRequest | undefined): Observable<SingleUserInfo> {
        let url_ = this.baseUrl + "/api/users/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUser(<any>response_);
                } catch (e) {
                    return <Observable<SingleUserInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<SingleUserInfo>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateUser(response: HttpResponseBase): Observable<SingleUserInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SingleUserInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SingleUserInfo>(<any>null);
    }

    /**
     * Permanently deletes a user.
     * @param userId The id of the user to delete.
     * @return OK
     */
    deleteUser(userId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/users/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUser(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Gets a list of the applications the user has given consent to or currently has IdentityServer side tokens for.
     * @param userId The id of the user.
     * @return OK
     */
    getUserApplications(userId: string): Observable<UserClientInfoResultSet> {
        let url_ = this.baseUrl + "/api/users/{userId}/applications";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserApplications(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserApplications(<any>response_);
                } catch (e) {
                    return <Observable<UserClientInfoResultSet>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserClientInfoResultSet>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserApplications(response: HttpResponseBase): Observable<UserClientInfoResultSet> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserClientInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserClientInfoResultSet>(<any>null);
    }

    /**
     * Adds a claim for the specified user.
     * @param userId The id of the user.
     * @param body (optional) The claim to add.
     * @return Created
     */
    addUserClaim(userId: string, body?: CreateClaimRequest | undefined): Observable<ClaimInfo> {
        let url_ = this.baseUrl + "/api/users/{userId}/claims";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddUserClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddUserClaim(<any>response_);
                } catch (e) {
                    return <Observable<ClaimInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClaimInfo>><any>_observableThrow(response_);
        }));
    }

    protected processAddUserClaim(response: HttpResponseBase): Observable<ClaimInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ClaimInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClaimInfo>(<any>null);
    }

    /**
     * Gets a specified claim for a given user.
     * @param userId The id of the user.
     * @param claimId The id of the claim.
     * @return OK
     */
    getUserClaim(userId: string, claimId: number): Observable<BasicClaimInfo> {
        let url_ = this.baseUrl + "/api/users/{userId}/claims/{claimId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined.");
        url_ = url_.replace("{claimId}", encodeURIComponent("" + claimId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserClaim(<any>response_);
                } catch (e) {
                    return <Observable<BasicClaimInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<BasicClaimInfo>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserClaim(response: HttpResponseBase): Observable<BasicClaimInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BasicClaimInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BasicClaimInfo>(<any>null);
    }

    /**
     * Updates an existing user claim.
     * @param userId The id of the user.
     * @param claimId The id of the user claim.
     * @param body (optional) Contains info about the user claim to update.
     * @return OK
     */
    updateUserClaim(userId: string, claimId: number, body?: UpdateUserClaimRequest | undefined): Observable<ClaimInfo> {
        let url_ = this.baseUrl + "/api/users/{userId}/claims/{claimId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined.");
        url_ = url_.replace("{claimId}", encodeURIComponent("" + claimId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserClaim(<any>response_);
                } catch (e) {
                    return <Observable<ClaimInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClaimInfo>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateUserClaim(response: HttpResponseBase): Observable<ClaimInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClaimInfo>(<any>null);
    }

    /**
     * Permanently deletes a specified claim from a user.
     * @param userId The id of the user.
     * @param claimId The id of the claim to delete.
     * @return OK
     */
    deleteUserClaim(userId: string, claimId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/claims/{claimId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined.");
        url_ = url_.replace("{claimId}", encodeURIComponent("" + claimId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUserClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUserClaim(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteUserClaim(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Adds a new role to the specified user.
     * @param userId The id of the user.
     * @param roleId The id of the role.
     * @return OK
     */
    addUserRole(userId: string, roleId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/roles/{roleId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined.");
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddUserRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddUserRole(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddUserRole(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Removes an existing role from the specified user.
     * @param userId The id of the user.
     * @param roleId The id of the role.
     * @return OK
     */
    deleteUserRole(userId: string, roleId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/roles/{roleId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined.");
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUserRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUserRole(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteUserRole(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

/** Describes value type names. */
export enum ValueType {
    Boolean = "Boolean",
    DateTime = "DateTime",
    Int = "Int",
    String = "String",
}

/** Models an application claim type. */
export class ClaimTypeInfo implements IClaimTypeInfo {
    /** The unique id of the claim. */
    id?: string | undefined;
    /** The name. */
    name?: string | undefined;
    /** The name used for display purposes. */
    displayName?: string | undefined;
    /** A description. */
    description?: string | undefined;
    /** Determines whether this claim is required to create new users. */
    required?: boolean;
    /** Determines whether this is a system reserved claim. */
    reserved?: boolean;
    /** Determines whether this claim will be editable by a user if exposed through a public API. */
    userEditable?: boolean;
    /** A regex rule that constraints the values of the claim. */
    rule?: string | undefined;
    valueType?: ValueType;

    constructor(data?: IClaimTypeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.required = _data["required"];
            this.reserved = _data["reserved"];
            this.userEditable = _data["userEditable"];
            this.rule = _data["rule"];
            this.valueType = _data["valueType"];
        }
    }

    static fromJS(data: any): ClaimTypeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimTypeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["required"] = this.required;
        data["reserved"] = this.reserved;
        data["userEditable"] = this.userEditable;
        data["rule"] = this.rule;
        data["valueType"] = this.valueType;
        return data; 
    }
}

/** Models an application claim type. */
export interface IClaimTypeInfo {
    /** The unique id of the claim. */
    id?: string | undefined;
    /** The name. */
    name?: string | undefined;
    /** The name used for display purposes. */
    displayName?: string | undefined;
    /** A description. */
    description?: string | undefined;
    /** Determines whether this claim is required to create new users. */
    required?: boolean;
    /** Determines whether this is a system reserved claim. */
    reserved?: boolean;
    /** Determines whether this claim will be editable by a user if exposed through a public API. */
    userEditable?: boolean;
    /** A regex rule that constraints the values of the claim. */
    rule?: string | undefined;
    valueType?: ValueType;
}

export class ClaimTypeInfoResultSet implements IClaimTypeInfoResultSet {
    count?: number;
    items?: ClaimTypeInfo[] | undefined;

    constructor(data?: IClaimTypeInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ClaimTypeInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClaimTypeInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimTypeInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IClaimTypeInfoResultSet {
    count?: number;
    items?: ClaimTypeInfo[] | undefined;
}

export class ValidationProblemDetails implements IValidationProblemDetails {
    readonly errors?: { [key: string]: string[]; } | undefined;
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    readonly extensions?: { [key: string]: any; } | undefined;

    constructor(data?: IValidationProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["errors"]) {
                (<any>this).errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>this).errors![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["extensions"]) {
                (<any>this).extensions = {} as any;
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        (<any>this).extensions![key] = _data["extensions"][key];
                }
            }
        }
    }

    static fromJS(data: any): ValidationProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    data["errors"][key] = this.errors[key];
            }
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key];
            }
        }
        return data; 
    }
}

export interface IValidationProblemDetails {
    errors?: { [key: string]: string[]; } | undefined;
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    readonly extensions?: { [key: string]: any; } | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["extensions"]) {
                (<any>this).extensions = {} as any;
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        (<any>this).extensions![key] = _data["extensions"][key];
                }
            }
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key];
            }
        }
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;
}

/** Models a claim type that will be created on the server. */
export class CreateClaimTypeRequest implements ICreateClaimTypeRequest {
    /** The name. */
    name!: string | undefined;
    /** The name used for display purposes. If not set, Indice.AspNetCore.Identity.Features.CreateClaimTypeRequest.Name is used. */
    displayName?: string | undefined;
    /** A description. */
    description?: string | undefined;
    /** Determines whether this claim is required to create new users. */
    required?: boolean;
    /** Determines whether this claim will be editable by a user if exposed through a public API. */
    userEditable?: boolean;
    /** A regex rule that constraints the values of the claim. */
    rule?: string | undefined;
    valueType?: ValueType;

    constructor(data?: ICreateClaimTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.required = _data["required"];
            this.userEditable = _data["userEditable"];
            this.rule = _data["rule"];
            this.valueType = _data["valueType"];
        }
    }

    static fromJS(data: any): CreateClaimTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateClaimTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["required"] = this.required;
        data["userEditable"] = this.userEditable;
        data["rule"] = this.rule;
        data["valueType"] = this.valueType;
        return data; 
    }
}

/** Models a claim type that will be created on the server. */
export interface ICreateClaimTypeRequest {
    /** The name. */
    name: string | undefined;
    /** The name used for display purposes. If not set, Indice.AspNetCore.Identity.Features.CreateClaimTypeRequest.Name is used. */
    displayName?: string | undefined;
    /** A description. */
    description?: string | undefined;
    /** Determines whether this claim is required to create new users. */
    required?: boolean;
    /** Determines whether this claim will be editable by a user if exposed through a public API. */
    userEditable?: boolean;
    /** A regex rule that constraints the values of the claim. */
    rule?: string | undefined;
    valueType?: ValueType;
}

/** Models a claim type that will be updated on the server. */
export class UpdateClaimTypeRequest implements IUpdateClaimTypeRequest {
    /** The name used for display purposes. */
    displayName?: string | undefined;
    /** A description. */
    description?: string | undefined;
    /** Determines whether this claim is required to create new users. */
    required?: boolean;
    /** Determines whether this claim will be editable by a user if exposed through a public API. */
    userEditable?: boolean;
    /** A regex rule that constraints the values of the claim. */
    rule?: string | undefined;
    valueType?: ValueType;

    constructor(data?: IUpdateClaimTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.required = _data["required"];
            this.userEditable = _data["userEditable"];
            this.rule = _data["rule"];
            this.valueType = _data["valueType"];
        }
    }

    static fromJS(data: any): UpdateClaimTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateClaimTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["required"] = this.required;
        data["userEditable"] = this.userEditable;
        data["rule"] = this.rule;
        data["valueType"] = this.valueType;
        return data; 
    }
}

/** Models a claim type that will be updated on the server. */
export interface IUpdateClaimTypeRequest {
    /** The name used for display purposes. */
    displayName?: string | undefined;
    /** A description. */
    description?: string | undefined;
    /** Determines whether this claim is required to create new users. */
    required?: boolean;
    /** Determines whether this claim will be editable by a user if exposed through a public API. */
    userEditable?: boolean;
    /** A regex rule that constraints the values of the claim. */
    rule?: string | undefined;
    valueType?: ValueType;
}

/** Models a system client. */
export class ClientInfo implements IClientInfo {
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Determines whether this application is enabled or not. */
    enabled?: boolean | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Specifies whether the client can be edited or not. */
    nonEditable?: boolean;

    constructor(data?: IClientInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.description = _data["description"];
            this.enabled = _data["enabled"];
            this.requireConsent = _data["requireConsent"];
            this.allowRememberConsent = _data["allowRememberConsent"];
            this.logoUri = _data["logoUri"];
            this.clientUri = _data["clientUri"];
            this.nonEditable = _data["nonEditable"];
        }
    }

    static fromJS(data: any): ClientInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ClientInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["description"] = this.description;
        data["enabled"] = this.enabled;
        data["requireConsent"] = this.requireConsent;
        data["allowRememberConsent"] = this.allowRememberConsent;
        data["logoUri"] = this.logoUri;
        data["clientUri"] = this.clientUri;
        data["nonEditable"] = this.nonEditable;
        return data; 
    }
}

/** Models a system client. */
export interface IClientInfo {
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Determines whether this application is enabled or not. */
    enabled?: boolean | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Specifies whether the client can be edited or not. */
    nonEditable?: boolean;
}

export class ClientInfoResultSet implements IClientInfoResultSet {
    count?: number;
    items?: ClientInfo[] | undefined;

    constructor(data?: IClientInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ClientInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClientInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new ClientInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IClientInfoResultSet {
    count?: number;
    items?: ClientInfo[] | undefined;
}

/** Models an OAuth client type. */
export enum ClientType {
    SPA = "SPA",
    WebApp = "WebApp",
    Native = "Native",
    Machine = "Machine",
    Device = "Device",
    SPALegacy = "SPALegacy",
}

/** The type of client secret. */
export enum SecretType {
    X509Thumbprint = "X509Thumbprint",
    SharedSecret = "SharedSecret",
}

/** Models a client secret that will be created on the server. */
export class ClientSecretRequest implements IClientSecretRequest {
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    type?: SecretType;

    constructor(data?: IClientSecretRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.value = _data["value"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ClientSecretRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ClientSecretRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["value"] = this.value;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["type"] = this.type;
        return data; 
    }
}

/** Models a client secret that will be created on the server. */
export interface IClientSecretRequest {
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    type?: SecretType;
}

/** Models a client that will be created on the server. */
export class CreateClientRequest implements ICreateClientRequest {
    clientType?: ClientType;
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Allowed URL to return after logging in. */
    redirectUri?: string | undefined;
    /** Allowed URL to return after logout. */
    postLogoutRedirectUri?: string | undefined;
    /** The client secrets. */
    secrets?: ClientSecretRequest[] | undefined;
    /** The list of identity resources allowed by the client. */
    identityResources?: string[] | undefined;
    /** The list of API resources allowed by the client. */
    apiResources?: string[] | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean;

    constructor(data?: ICreateClientRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientType = _data["clientType"];
            this.clientId = _data["clientId"];
            this.redirectUri = _data["redirectUri"];
            this.postLogoutRedirectUri = _data["postLogoutRedirectUri"];
            if (Array.isArray(_data["secrets"])) {
                this.secrets = [] as any;
                for (let item of _data["secrets"])
                    this.secrets!.push(ClientSecretRequest.fromJS(item));
            }
            if (Array.isArray(_data["identityResources"])) {
                this.identityResources = [] as any;
                for (let item of _data["identityResources"])
                    this.identityResources!.push(item);
            }
            if (Array.isArray(_data["apiResources"])) {
                this.apiResources = [] as any;
                for (let item of _data["apiResources"])
                    this.apiResources!.push(item);
            }
            this.clientName = _data["clientName"];
            this.clientUri = _data["clientUri"];
            this.logoUri = _data["logoUri"];
            this.description = _data["description"];
            this.requireConsent = _data["requireConsent"];
        }
    }

    static fromJS(data: any): CreateClientRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateClientRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientType"] = this.clientType;
        data["clientId"] = this.clientId;
        data["redirectUri"] = this.redirectUri;
        data["postLogoutRedirectUri"] = this.postLogoutRedirectUri;
        if (Array.isArray(this.secrets)) {
            data["secrets"] = [];
            for (let item of this.secrets)
                data["secrets"].push(item.toJSON());
        }
        if (Array.isArray(this.identityResources)) {
            data["identityResources"] = [];
            for (let item of this.identityResources)
                data["identityResources"].push(item);
        }
        if (Array.isArray(this.apiResources)) {
            data["apiResources"] = [];
            for (let item of this.apiResources)
                data["apiResources"].push(item);
        }
        data["clientName"] = this.clientName;
        data["clientUri"] = this.clientUri;
        data["logoUri"] = this.logoUri;
        data["description"] = this.description;
        data["requireConsent"] = this.requireConsent;
        return data; 
    }
}

/** Models a client that will be created on the server. */
export interface ICreateClientRequest {
    clientType?: ClientType;
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Allowed URL to return after logging in. */
    redirectUri?: string | undefined;
    /** Allowed URL to return after logout. */
    postLogoutRedirectUri?: string | undefined;
    /** The client secrets. */
    secrets?: ClientSecretRequest[] | undefined;
    /** The list of identity resources allowed by the client. */
    identityResources?: string[] | undefined;
    /** The list of API resources allowed by the client. */
    apiResources?: string[] | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean;
}

export enum AccessTokenType {
    Jwt = "Jwt",
    Reference = "Reference",
}

/** Models a claim. */
export class ClaimInfo implements IClaimInfo {
    /** The id of the user claim entry. */
    id?: number;
    /** The type of the claim. */
    type?: string | undefined;
    /** The value of the claim. */
    value?: string | undefined;

    constructor(data?: IClaimInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ClaimInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["value"] = this.value;
        return data; 
    }
}

/** Models a claim. */
export interface IClaimInfo {
    /** The id of the user claim entry. */
    id?: number;
    /** The type of the claim. */
    type?: string | undefined;
    /** The value of the claim. */
    value?: string | undefined;
}

/** Models an Client secret used in flows that require this. */
export class ClientSecretInfo implements IClientSecretInfo {
    /** The identifier for the API secret. */
    id?: number;
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    type?: SecretType;

    constructor(data?: IClientSecretInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.value = _data["value"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ClientSecretInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ClientSecretInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["value"] = this.value;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["type"] = this.type;
        return data; 
    }
}

/** Models an Client secret used in flows that require this. */
export interface IClientSecretInfo {
    /** The identifier for the API secret. */
    id?: number;
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    type?: SecretType;
}

/** Models a system client when API provides info for a single client. */
export class SingleClientInfo implements ISingleClientInfo {
    /** Lifetime of identity token in seconds. */
    identityTokenLifetime?: number | undefined;
    /** Lifetime of access token in seconds */
    accessTokenLifetime?: number | undefined;
    /** Lifetime of a user consent in seconds. */
    consentLifetime?: number | undefined;
    /** The maximum duration (in seconds) since the last time the user authenticated. */
    userSsoLifetime?: number | undefined;
    /** Specifies logout URI at client for HTTP front-channel based logout. */
    frontChannelLogoutUri?: string | undefined;
    /** Gets or sets a salt value used in pair-wise subjectId generation for users of this client. */
    pairWiseSubjectSalt?: string | undefined;
    accessTokenType?: AccessTokenType;
    /** Specifies is the user's session id should be sent to the FrontChannelLogoutUri. */
    frontChannelLogoutSessionRequired?: boolean | undefined;
    /** Gets or sets a value indicating whether JWT access tokens should include an identifier. */
    includeJwtId?: boolean | undefined;
    /** Controls whether access tokens are transmitted via the browser for this client. This can prevent accidental leakage of access tokens when multiple response types are allowed. */
    allowAccessTokensViaBrowser?: boolean | undefined;
    /** When requesting both an id token and access token, should the user claims always be added to the id token instead of requring the client to use the userinfo endpoint. */
    alwaysIncludeUserClaimsInIdToken?: boolean | undefined;
    /** Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow. */
    alwaysSendClientClaims?: boolean | undefined;
    /** Lifetime of authorization code in seconds. */
    authorizationCodeLifetime?: number | undefined;
    /** Specifies whether a proof key is required for authorization code based token requests. */
    requirePkce?: boolean | undefined;
    /** Specifies whether a proof key can be sent using plain method. */
    allowPlainTextPkce?: boolean | undefined;
    /** Gets or sets a value to prefix it on client claim types. */
    clientClaimsPrefix?: string | undefined;
    /** List of client claims. */
    claims?: ClaimInfo[] | undefined;
    /** List of configured grant types. */
    grantTypes?: string[] | undefined;
    /** List of available client secrets. */
    secrets?: ClientSecretInfo[] | undefined;
    /** Cors origins allowed. */
    allowedCorsOrigins?: string[] | undefined;
    /** Allowed URIs to redirect after logout. */
    postLogoutRedirectUris?: string[] | undefined;
    /** Allowed URIs to redirect after successful login. */
    redirectUris?: string[] | undefined;
    /** The API resources that the client has access to. */
    apiResources?: string[] | undefined;
    /** The identity resources that the client has access to. */
    identityResources?: string[] | undefined;
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Determines whether this application is enabled or not. */
    enabled?: boolean | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Specifies whether the client can be edited or not. */
    nonEditable?: boolean;

    constructor(data?: ISingleClientInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.identityTokenLifetime = _data["identityTokenLifetime"];
            this.accessTokenLifetime = _data["accessTokenLifetime"];
            this.consentLifetime = _data["consentLifetime"];
            this.userSsoLifetime = _data["userSsoLifetime"];
            this.frontChannelLogoutUri = _data["frontChannelLogoutUri"];
            this.pairWiseSubjectSalt = _data["pairWiseSubjectSalt"];
            this.accessTokenType = _data["accessTokenType"];
            this.frontChannelLogoutSessionRequired = _data["frontChannelLogoutSessionRequired"];
            this.includeJwtId = _data["includeJwtId"];
            this.allowAccessTokensViaBrowser = _data["allowAccessTokensViaBrowser"];
            this.alwaysIncludeUserClaimsInIdToken = _data["alwaysIncludeUserClaimsInIdToken"];
            this.alwaysSendClientClaims = _data["alwaysSendClientClaims"];
            this.authorizationCodeLifetime = _data["authorizationCodeLifetime"];
            this.requirePkce = _data["requirePkce"];
            this.allowPlainTextPkce = _data["allowPlainTextPkce"];
            this.clientClaimsPrefix = _data["clientClaimsPrefix"];
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(ClaimInfo.fromJS(item));
            }
            if (Array.isArray(_data["grantTypes"])) {
                this.grantTypes = [] as any;
                for (let item of _data["grantTypes"])
                    this.grantTypes!.push(item);
            }
            if (Array.isArray(_data["secrets"])) {
                this.secrets = [] as any;
                for (let item of _data["secrets"])
                    this.secrets!.push(ClientSecretInfo.fromJS(item));
            }
            if (Array.isArray(_data["allowedCorsOrigins"])) {
                this.allowedCorsOrigins = [] as any;
                for (let item of _data["allowedCorsOrigins"])
                    this.allowedCorsOrigins!.push(item);
            }
            if (Array.isArray(_data["postLogoutRedirectUris"])) {
                this.postLogoutRedirectUris = [] as any;
                for (let item of _data["postLogoutRedirectUris"])
                    this.postLogoutRedirectUris!.push(item);
            }
            if (Array.isArray(_data["redirectUris"])) {
                this.redirectUris = [] as any;
                for (let item of _data["redirectUris"])
                    this.redirectUris!.push(item);
            }
            if (Array.isArray(_data["apiResources"])) {
                this.apiResources = [] as any;
                for (let item of _data["apiResources"])
                    this.apiResources!.push(item);
            }
            if (Array.isArray(_data["identityResources"])) {
                this.identityResources = [] as any;
                for (let item of _data["identityResources"])
                    this.identityResources!.push(item);
            }
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.description = _data["description"];
            this.enabled = _data["enabled"];
            this.requireConsent = _data["requireConsent"];
            this.allowRememberConsent = _data["allowRememberConsent"];
            this.logoUri = _data["logoUri"];
            this.clientUri = _data["clientUri"];
            this.nonEditable = _data["nonEditable"];
        }
    }

    static fromJS(data: any): SingleClientInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SingleClientInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["identityTokenLifetime"] = this.identityTokenLifetime;
        data["accessTokenLifetime"] = this.accessTokenLifetime;
        data["consentLifetime"] = this.consentLifetime;
        data["userSsoLifetime"] = this.userSsoLifetime;
        data["frontChannelLogoutUri"] = this.frontChannelLogoutUri;
        data["pairWiseSubjectSalt"] = this.pairWiseSubjectSalt;
        data["accessTokenType"] = this.accessTokenType;
        data["frontChannelLogoutSessionRequired"] = this.frontChannelLogoutSessionRequired;
        data["includeJwtId"] = this.includeJwtId;
        data["allowAccessTokensViaBrowser"] = this.allowAccessTokensViaBrowser;
        data["alwaysIncludeUserClaimsInIdToken"] = this.alwaysIncludeUserClaimsInIdToken;
        data["alwaysSendClientClaims"] = this.alwaysSendClientClaims;
        data["authorizationCodeLifetime"] = this.authorizationCodeLifetime;
        data["requirePkce"] = this.requirePkce;
        data["allowPlainTextPkce"] = this.allowPlainTextPkce;
        data["clientClaimsPrefix"] = this.clientClaimsPrefix;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        if (Array.isArray(this.grantTypes)) {
            data["grantTypes"] = [];
            for (let item of this.grantTypes)
                data["grantTypes"].push(item);
        }
        if (Array.isArray(this.secrets)) {
            data["secrets"] = [];
            for (let item of this.secrets)
                data["secrets"].push(item.toJSON());
        }
        if (Array.isArray(this.allowedCorsOrigins)) {
            data["allowedCorsOrigins"] = [];
            for (let item of this.allowedCorsOrigins)
                data["allowedCorsOrigins"].push(item);
        }
        if (Array.isArray(this.postLogoutRedirectUris)) {
            data["postLogoutRedirectUris"] = [];
            for (let item of this.postLogoutRedirectUris)
                data["postLogoutRedirectUris"].push(item);
        }
        if (Array.isArray(this.redirectUris)) {
            data["redirectUris"] = [];
            for (let item of this.redirectUris)
                data["redirectUris"].push(item);
        }
        if (Array.isArray(this.apiResources)) {
            data["apiResources"] = [];
            for (let item of this.apiResources)
                data["apiResources"].push(item);
        }
        if (Array.isArray(this.identityResources)) {
            data["identityResources"] = [];
            for (let item of this.identityResources)
                data["identityResources"].push(item);
        }
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["description"] = this.description;
        data["enabled"] = this.enabled;
        data["requireConsent"] = this.requireConsent;
        data["allowRememberConsent"] = this.allowRememberConsent;
        data["logoUri"] = this.logoUri;
        data["clientUri"] = this.clientUri;
        data["nonEditable"] = this.nonEditable;
        return data; 
    }
}

/** Models a system client when API provides info for a single client. */
export interface ISingleClientInfo {
    /** Lifetime of identity token in seconds. */
    identityTokenLifetime?: number | undefined;
    /** Lifetime of access token in seconds */
    accessTokenLifetime?: number | undefined;
    /** Lifetime of a user consent in seconds. */
    consentLifetime?: number | undefined;
    /** The maximum duration (in seconds) since the last time the user authenticated. */
    userSsoLifetime?: number | undefined;
    /** Specifies logout URI at client for HTTP front-channel based logout. */
    frontChannelLogoutUri?: string | undefined;
    /** Gets or sets a salt value used in pair-wise subjectId generation for users of this client. */
    pairWiseSubjectSalt?: string | undefined;
    accessTokenType?: AccessTokenType;
    /** Specifies is the user's session id should be sent to the FrontChannelLogoutUri. */
    frontChannelLogoutSessionRequired?: boolean | undefined;
    /** Gets or sets a value indicating whether JWT access tokens should include an identifier. */
    includeJwtId?: boolean | undefined;
    /** Controls whether access tokens are transmitted via the browser for this client. This can prevent accidental leakage of access tokens when multiple response types are allowed. */
    allowAccessTokensViaBrowser?: boolean | undefined;
    /** When requesting both an id token and access token, should the user claims always be added to the id token instead of requring the client to use the userinfo endpoint. */
    alwaysIncludeUserClaimsInIdToken?: boolean | undefined;
    /** Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow. */
    alwaysSendClientClaims?: boolean | undefined;
    /** Lifetime of authorization code in seconds. */
    authorizationCodeLifetime?: number | undefined;
    /** Specifies whether a proof key is required for authorization code based token requests. */
    requirePkce?: boolean | undefined;
    /** Specifies whether a proof key can be sent using plain method. */
    allowPlainTextPkce?: boolean | undefined;
    /** Gets or sets a value to prefix it on client claim types. */
    clientClaimsPrefix?: string | undefined;
    /** List of client claims. */
    claims?: ClaimInfo[] | undefined;
    /** List of configured grant types. */
    grantTypes?: string[] | undefined;
    /** List of available client secrets. */
    secrets?: ClientSecretInfo[] | undefined;
    /** Cors origins allowed. */
    allowedCorsOrigins?: string[] | undefined;
    /** Allowed URIs to redirect after logout. */
    postLogoutRedirectUris?: string[] | undefined;
    /** Allowed URIs to redirect after successful login. */
    redirectUris?: string[] | undefined;
    /** The API resources that the client has access to. */
    apiResources?: string[] | undefined;
    /** The identity resources that the client has access to. */
    identityResources?: string[] | undefined;
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Determines whether this application is enabled or not. */
    enabled?: boolean | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Specifies whether the client can be edited or not. */
    nonEditable?: boolean;
}

/** Models a client that will be updated on the server. */
export class UpdateClientRequest implements IUpdateClientRequest {
    /** Lifetime of identity token in seconds. */
    identityTokenLifetime?: number;
    /** Lifetime of access token in seconds */
    accessTokenLifetime?: number;
    /** Lifetime of a user consent in seconds. */
    consentLifetime?: number;
    /** The maximum duration (in seconds) since the last time the user authenticated. */
    userSsoLifetime?: number;
    /** Specifies logout URI at client for HTTP front-channel based logout. */
    frontChannelLogoutUri?: string | undefined;
    /** Gets or sets a salt value used in pair-wise subjectId generation for users of this client. */
    pairWiseSubjectSalt?: string | undefined;
    accessTokenType?: AccessTokenType;
    /** Specifies is the user's session id should be sent to the FrontChannelLogoutUri. */
    frontChannelLogoutSessionRequired?: boolean;
    /** Gets or sets a value indicating whether JWT access tokens should include an identifier. */
    includeJwtId?: boolean;
    /** Controls whether access tokens are transmitted via the browser for this client. This can prevent accidental leakage of access tokens when multiple response types are allowed. */
    allowAccessTokensViaBrowser?: boolean;
    /** When requesting both an id token and access token, should the user claims always be added to the id token instead of requring the client to use the userinfo endpoint. */
    alwaysIncludeUserClaimsInIdToken?: boolean;
    /** Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow. */
    alwaysSendClientClaims?: boolean;
    /** Lifetime of authorization code in seconds. */
    authorizationCodeLifetime?: number;
    /** Specifies whether a proof key is required for authorization code based token requests. */
    requirePkce?: boolean;
    /** Specifies whether a proof key can be sent using plain method. */
    allowPlainTextPkce?: boolean;
    /** Gets or sets a value to prefix it on client claim types. */
    clientClaimsPrefix?: string | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean;

    constructor(data?: IUpdateClientRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.identityTokenLifetime = _data["identityTokenLifetime"];
            this.accessTokenLifetime = _data["accessTokenLifetime"];
            this.consentLifetime = _data["consentLifetime"];
            this.userSsoLifetime = _data["userSsoLifetime"];
            this.frontChannelLogoutUri = _data["frontChannelLogoutUri"];
            this.pairWiseSubjectSalt = _data["pairWiseSubjectSalt"];
            this.accessTokenType = _data["accessTokenType"];
            this.frontChannelLogoutSessionRequired = _data["frontChannelLogoutSessionRequired"];
            this.includeJwtId = _data["includeJwtId"];
            this.allowAccessTokensViaBrowser = _data["allowAccessTokensViaBrowser"];
            this.alwaysIncludeUserClaimsInIdToken = _data["alwaysIncludeUserClaimsInIdToken"];
            this.alwaysSendClientClaims = _data["alwaysSendClientClaims"];
            this.authorizationCodeLifetime = _data["authorizationCodeLifetime"];
            this.requirePkce = _data["requirePkce"];
            this.allowPlainTextPkce = _data["allowPlainTextPkce"];
            this.clientClaimsPrefix = _data["clientClaimsPrefix"];
            this.allowRememberConsent = _data["allowRememberConsent"];
            this.clientName = _data["clientName"];
            this.clientUri = _data["clientUri"];
            this.logoUri = _data["logoUri"];
            this.description = _data["description"];
            this.requireConsent = _data["requireConsent"];
        }
    }

    static fromJS(data: any): UpdateClientRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateClientRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["identityTokenLifetime"] = this.identityTokenLifetime;
        data["accessTokenLifetime"] = this.accessTokenLifetime;
        data["consentLifetime"] = this.consentLifetime;
        data["userSsoLifetime"] = this.userSsoLifetime;
        data["frontChannelLogoutUri"] = this.frontChannelLogoutUri;
        data["pairWiseSubjectSalt"] = this.pairWiseSubjectSalt;
        data["accessTokenType"] = this.accessTokenType;
        data["frontChannelLogoutSessionRequired"] = this.frontChannelLogoutSessionRequired;
        data["includeJwtId"] = this.includeJwtId;
        data["allowAccessTokensViaBrowser"] = this.allowAccessTokensViaBrowser;
        data["alwaysIncludeUserClaimsInIdToken"] = this.alwaysIncludeUserClaimsInIdToken;
        data["alwaysSendClientClaims"] = this.alwaysSendClientClaims;
        data["authorizationCodeLifetime"] = this.authorizationCodeLifetime;
        data["requirePkce"] = this.requirePkce;
        data["allowPlainTextPkce"] = this.allowPlainTextPkce;
        data["clientClaimsPrefix"] = this.clientClaimsPrefix;
        data["allowRememberConsent"] = this.allowRememberConsent;
        data["clientName"] = this.clientName;
        data["clientUri"] = this.clientUri;
        data["logoUri"] = this.logoUri;
        data["description"] = this.description;
        data["requireConsent"] = this.requireConsent;
        return data; 
    }
}

/** Models a client that will be updated on the server. */
export interface IUpdateClientRequest {
    /** Lifetime of identity token in seconds. */
    identityTokenLifetime?: number;
    /** Lifetime of access token in seconds */
    accessTokenLifetime?: number;
    /** Lifetime of a user consent in seconds. */
    consentLifetime?: number;
    /** The maximum duration (in seconds) since the last time the user authenticated. */
    userSsoLifetime?: number;
    /** Specifies logout URI at client for HTTP front-channel based logout. */
    frontChannelLogoutUri?: string | undefined;
    /** Gets or sets a salt value used in pair-wise subjectId generation for users of this client. */
    pairWiseSubjectSalt?: string | undefined;
    accessTokenType?: AccessTokenType;
    /** Specifies is the user's session id should be sent to the FrontChannelLogoutUri. */
    frontChannelLogoutSessionRequired?: boolean;
    /** Gets or sets a value indicating whether JWT access tokens should include an identifier. */
    includeJwtId?: boolean;
    /** Controls whether access tokens are transmitted via the browser for this client. This can prevent accidental leakage of access tokens when multiple response types are allowed. */
    allowAccessTokensViaBrowser?: boolean;
    /** When requesting both an id token and access token, should the user claims always be added to the id token instead of requring the client to use the userinfo endpoint. */
    alwaysIncludeUserClaimsInIdToken?: boolean;
    /** Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow. */
    alwaysSendClientClaims?: boolean;
    /** Lifetime of authorization code in seconds. */
    authorizationCodeLifetime?: number;
    /** Specifies whether a proof key is required for authorization code based token requests. */
    requirePkce?: boolean;
    /** Specifies whether a proof key can be sent using plain method. */
    allowPlainTextPkce?: boolean;
    /** Gets or sets a value to prefix it on client claim types. */
    clientClaimsPrefix?: string | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean;
}

/** Models a request to create a claim for an entity (e.x user or client). */
export class CreateClaimRequest implements ICreateClaimRequest {
    /** The type of the claim. */
    type?: string | undefined;
    /** The value of the claim. */
    value?: string | undefined;

    constructor(data?: ICreateClaimRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): CreateClaimRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateClaimRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["value"] = this.value;
        return data; 
    }
}

/** Models a request to create a claim for an entity (e.x user or client). */
export interface ICreateClaimRequest {
    /** The type of the claim. */
    type?: string | undefined;
    /** The value of the claim. */
    value?: string | undefined;
}

/** Describes a blog post item. */
export class BlogItemInfo implements IBlogItemInfo {
    /** Title of the post. */
    title?: string | undefined;
    /** Original link to the post. */
    link?: string | undefined;
    /** The datetime that the post was published. */
    publishDate?: Date;
    /** A small description for the post. */
    description?: string | undefined;

    constructor(data?: IBlogItemInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.link = _data["link"];
            this.publishDate = _data["publishDate"] ? new Date(_data["publishDate"].toString()) : <any>undefined;
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): BlogItemInfo {
        data = typeof data === 'object' ? data : {};
        let result = new BlogItemInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["link"] = this.link;
        data["publishDate"] = this.publishDate ? this.publishDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        return data; 
    }
}

/** Describes a blog post item. */
export interface IBlogItemInfo {
    /** Title of the post. */
    title?: string | undefined;
    /** Original link to the post. */
    link?: string | undefined;
    /** The datetime that the post was published. */
    publishDate?: Date;
    /** A small description for the post. */
    description?: string | undefined;
}

export class BlogItemInfoResultSet implements IBlogItemInfoResultSet {
    count?: number;
    items?: BlogItemInfo[] | undefined;

    constructor(data?: IBlogItemInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BlogItemInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BlogItemInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new BlogItemInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBlogItemInfoResultSet {
    count?: number;
    items?: BlogItemInfo[] | undefined;
}

/** Contains summary information about the system. */
export class SummaryInfo implements ISummaryInfo {
    /** The total number of users. */
    numberOfUsers?: number;
    /** The total number of users. */
    numberOfClients?: number;

    constructor(data?: ISummaryInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numberOfUsers = _data["numberOfUsers"];
            this.numberOfClients = _data["numberOfClients"];
        }
    }

    static fromJS(data: any): SummaryInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SummaryInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numberOfUsers"] = this.numberOfUsers;
        data["numberOfClients"] = this.numberOfClients;
        return data; 
    }
}

/** Contains summary information about the system. */
export interface ISummaryInfo {
    /** The total number of users. */
    numberOfUsers?: number;
    /** The total number of users. */
    numberOfClients?: number;
}

/** Models an identity resource for the application. */
export class IdentityResourceInfo implements IIdentityResourceInfo {
    /** Unique identifier for the identity resource. */
    id?: number;
    /** The name of the resource. */
    name?: string | undefined;
    /** The display name of the resource. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;
    /** Determines whether this resource is enabled or not. */
    enabled?: boolean;
    /** Determines whether this resource is required or not. */
    required?: boolean;
    /** Determines whether this resource should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this resource should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;
    /** Determines whether this resource is editable or not. */
    nonEditable?: boolean;
    /** List of accociated claims that should be included when this resource is requested. */
    allowedClaims?: string[] | undefined;

    constructor(data?: IIdentityResourceInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.enabled = _data["enabled"];
            this.required = _data["required"];
            this.emphasize = _data["emphasize"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            this.nonEditable = _data["nonEditable"];
            if (Array.isArray(_data["allowedClaims"])) {
                this.allowedClaims = [] as any;
                for (let item of _data["allowedClaims"])
                    this.allowedClaims!.push(item);
            }
        }
    }

    static fromJS(data: any): IdentityResourceInfo {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityResourceInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["enabled"] = this.enabled;
        data["required"] = this.required;
        data["emphasize"] = this.emphasize;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        data["nonEditable"] = this.nonEditable;
        if (Array.isArray(this.allowedClaims)) {
            data["allowedClaims"] = [];
            for (let item of this.allowedClaims)
                data["allowedClaims"].push(item);
        }
        return data; 
    }
}

/** Models an identity resource for the application. */
export interface IIdentityResourceInfo {
    /** Unique identifier for the identity resource. */
    id?: number;
    /** The name of the resource. */
    name?: string | undefined;
    /** The display name of the resource. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;
    /** Determines whether this resource is enabled or not. */
    enabled?: boolean;
    /** Determines whether this resource is required or not. */
    required?: boolean;
    /** Determines whether this resource should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this resource should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;
    /** Determines whether this resource is editable or not. */
    nonEditable?: boolean;
    /** List of accociated claims that should be included when this resource is requested. */
    allowedClaims?: string[] | undefined;
}

export class IdentityResourceInfoResultSet implements IIdentityResourceInfoResultSet {
    count?: number;
    items?: IdentityResourceInfo[] | undefined;

    constructor(data?: IIdentityResourceInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(IdentityResourceInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IdentityResourceInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityResourceInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IIdentityResourceInfoResultSet {
    count?: number;
    items?: IdentityResourceInfo[] | undefined;
}

/** Models an API resource that will be created on the server. */
export class CreateApiResourceRequest implements ICreateApiResourceRequest {
    /** The unique name of the resource. */
    name?: string | undefined;
    /** List of accociated user claims that should be included when this resource is requested. */
    userClaims?: string[] | undefined;
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;

    constructor(data?: ICreateApiResourceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["userClaims"])) {
                this.userClaims = [] as any;
                for (let item of _data["userClaims"])
                    this.userClaims!.push(item);
            }
            this.displayName = _data["displayName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateApiResourceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateApiResourceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.userClaims)) {
            data["userClaims"] = [];
            for (let item of this.userClaims)
                data["userClaims"].push(item);
        }
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        return data; 
    }
}

/** Models an API resource that will be created on the server. */
export interface ICreateApiResourceRequest {
    /** The unique name of the resource. */
    name?: string | undefined;
    /** List of accociated user claims that should be included when this resource is requested. */
    userClaims?: string[] | undefined;
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
}

/** Models access to an API resource. */
export class ScopeInfo implements IScopeInfo {
    /** Unique identifier for the scope. */
    id?: number;
    /** The name of the scope. */
    name?: string | undefined;
    /** The display name of the scope. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;
    /** Determines whether this scope is required or not. */
    required?: boolean | undefined;
    /** Determines whether this scope should be displayed emphasized or not. */
    emphasize?: boolean | undefined;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean | undefined;
    /** List of accociated user claims that should be included when a resource is requested. */
    userClaims?: string[] | undefined;

    constructor(data?: IScopeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.required = _data["required"];
            this.emphasize = _data["emphasize"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            if (Array.isArray(_data["userClaims"])) {
                this.userClaims = [] as any;
                for (let item of _data["userClaims"])
                    this.userClaims!.push(item);
            }
        }
    }

    static fromJS(data: any): ScopeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ScopeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["required"] = this.required;
        data["emphasize"] = this.emphasize;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        if (Array.isArray(this.userClaims)) {
            data["userClaims"] = [];
            for (let item of this.userClaims)
                data["userClaims"].push(item);
        }
        return data; 
    }
}

/** Models access to an API resource. */
export interface IScopeInfo {
    /** Unique identifier for the scope. */
    id?: number;
    /** The name of the scope. */
    name?: string | undefined;
    /** The display name of the scope. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;
    /** Determines whether this scope is required or not. */
    required?: boolean | undefined;
    /** Determines whether this scope should be displayed emphasized or not. */
    emphasize?: boolean | undefined;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean | undefined;
    /** List of accociated user claims that should be included when a resource is requested. */
    userClaims?: string[] | undefined;
}

/** Models an API secret used for the introspection endpoint. The API can authenticate with introspection using the API name and secret. */
export class ApiSecretInfo implements IApiSecretInfo {
    /** The identifier for the API secret. */
    id?: number;
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    type?: SecretType;

    constructor(data?: IApiSecretInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.value = _data["value"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ApiSecretInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ApiSecretInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["value"] = this.value;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["type"] = this.type;
        return data; 
    }
}

/** Models an API secret used for the introspection endpoint. The API can authenticate with introspection using the API name and secret. */
export interface IApiSecretInfo {
    /** The identifier for the API secret. */
    id?: number;
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    type?: SecretType;
}

/** Models an API resource for the application. */
export class ApiResourceInfo implements IApiResourceInfo {
    /** Unique identifier for the API resource. */
    id?: number;
    /** The name of the resource. */
    name?: string | undefined;
    /** The display name of the resource. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;
    /** Determines whether this resource is enabled or not. */
    enabled?: boolean;
    /** Determines whether this resource is editable or not. */
    nonEditable?: boolean;
    /** List of accociated claims that should be included when this resource is requested. */
    allowedClaims?: string[] | undefined;
    /** List of all scopes included in the resource. At least one scope must be included. */
    scopes?: ScopeInfo[] | undefined;
    secrets?: ApiSecretInfo[] | undefined;

    constructor(data?: IApiResourceInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.enabled = _data["enabled"];
            this.nonEditable = _data["nonEditable"];
            if (Array.isArray(_data["allowedClaims"])) {
                this.allowedClaims = [] as any;
                for (let item of _data["allowedClaims"])
                    this.allowedClaims!.push(item);
            }
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(ScopeInfo.fromJS(item));
            }
            if (Array.isArray(_data["secrets"])) {
                this.secrets = [] as any;
                for (let item of _data["secrets"])
                    this.secrets!.push(ApiSecretInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResourceInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResourceInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["enabled"] = this.enabled;
        data["nonEditable"] = this.nonEditable;
        if (Array.isArray(this.allowedClaims)) {
            data["allowedClaims"] = [];
            for (let item of this.allowedClaims)
                data["allowedClaims"].push(item);
        }
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item.toJSON());
        }
        if (Array.isArray(this.secrets)) {
            data["secrets"] = [];
            for (let item of this.secrets)
                data["secrets"].push(item.toJSON());
        }
        return data; 
    }
}

/** Models an API resource for the application. */
export interface IApiResourceInfo {
    /** Unique identifier for the API resource. */
    id?: number;
    /** The name of the resource. */
    name?: string | undefined;
    /** The display name of the resource. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;
    /** Determines whether this resource is enabled or not. */
    enabled?: boolean;
    /** Determines whether this resource is editable or not. */
    nonEditable?: boolean;
    /** List of accociated claims that should be included when this resource is requested. */
    allowedClaims?: string[] | undefined;
    /** List of all scopes included in the resource. At least one scope must be included. */
    scopes?: ScopeInfo[] | undefined;
    secrets?: ApiSecretInfo[] | undefined;
}

export class ApiResourceInfoResultSet implements IApiResourceInfoResultSet {
    count?: number;
    items?: ApiResourceInfo[] | undefined;

    constructor(data?: IApiResourceInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ApiResourceInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResourceInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResourceInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IApiResourceInfoResultSet {
    count?: number;
    items?: ApiResourceInfo[] | undefined;
}

/** Models an API resource that will be updated on the server. */
export class UpdateApiResourceRequest implements IUpdateApiResourceRequest {
    /** Specifies whether the resource is enabled. */
    enabled?: boolean;
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;

    constructor(data?: IUpdateApiResourceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enabled = _data["enabled"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateApiResourceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateApiResourceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enabled"] = this.enabled;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        return data; 
    }
}

/** Models an API resource that will be updated on the server. */
export interface IUpdateApiResourceRequest {
    /** Specifies whether the resource is enabled. */
    enabled?: boolean;
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
}

/** Models an API scope that will be created on the server. */
export class CreateApiScopeRequest implements ICreateApiScopeRequest {
    /** Determines whether this scope is required or not. */
    required?: boolean;
    /** Determines whether this scope should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;
    /** The unique name of the resource. */
    name?: string | undefined;
    /** List of accociated user claims that should be included when this resource is requested. */
    userClaims?: string[] | undefined;
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;

    constructor(data?: ICreateApiScopeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.required = _data["required"];
            this.emphasize = _data["emphasize"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            this.name = _data["name"];
            if (Array.isArray(_data["userClaims"])) {
                this.userClaims = [] as any;
                for (let item of _data["userClaims"])
                    this.userClaims!.push(item);
            }
            this.displayName = _data["displayName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateApiScopeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateApiScopeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["required"] = this.required;
        data["emphasize"] = this.emphasize;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        data["name"] = this.name;
        if (Array.isArray(this.userClaims)) {
            data["userClaims"] = [];
            for (let item of this.userClaims)
                data["userClaims"].push(item);
        }
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        return data; 
    }
}

/** Models an API scope that will be created on the server. */
export interface ICreateApiScopeRequest {
    /** Determines whether this scope is required or not. */
    required?: boolean;
    /** Determines whether this scope should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;
    /** The unique name of the resource. */
    name?: string | undefined;
    /** List of accociated user claims that should be included when this resource is requested. */
    userClaims?: string[] | undefined;
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
}

/** Models an API scope that will be updated on the server. */
export class UpdateApiScopeRequest implements IUpdateApiScopeRequest {
    /** Determines whether this scope is required or not. */
    required?: boolean;
    /** Determines whether this scope should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;

    constructor(data?: IUpdateApiScopeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.required = _data["required"];
            this.emphasize = _data["emphasize"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateApiScopeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateApiScopeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["required"] = this.required;
        data["emphasize"] = this.emphasize;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        return data; 
    }
}

/** Models an API scope that will be updated on the server. */
export interface IUpdateApiScopeRequest {
    /** Determines whether this scope is required or not. */
    required?: boolean;
    /** Determines whether this scope should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
}

export class ScopeInfoResultSet implements IScopeInfoResultSet {
    count?: number;
    items?: ScopeInfo[] | undefined;

    constructor(data?: IScopeInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ScopeInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ScopeInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new ScopeInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IScopeInfoResultSet {
    count?: number;
    items?: ScopeInfo[] | undefined;
}

/** Models an system role. */
export class RoleInfo implements IRoleInfo {
    /** The id of the role. */
    id?: string | undefined;
    /** The name of the role. */
    name?: string | undefined;
    /** A description for the role. */
    description?: string | undefined;

    constructor(data?: IRoleInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): RoleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RoleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data; 
    }
}

/** Models an system role. */
export interface IRoleInfo {
    /** The id of the role. */
    id?: string | undefined;
    /** The name of the role. */
    name?: string | undefined;
    /** A description for the role. */
    description?: string | undefined;
}

export class RoleInfoResultSet implements IRoleInfoResultSet {
    count?: number;
    items?: RoleInfo[] | undefined;

    constructor(data?: IRoleInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoleInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoleInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new RoleInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoleInfoResultSet {
    count?: number;
    items?: RoleInfo[] | undefined;
}

/** Models a role that will be created on the server. */
export class CreateRoleRequest implements ICreateRoleRequest {
    /** The name of the role. */
    name!: string | undefined;
    /** A description for the role. */
    description?: string | undefined;

    constructor(data?: ICreateRoleRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateRoleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRoleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data; 
    }
}

/** Models a role that will be created on the server. */
export interface ICreateRoleRequest {
    /** The name of the role. */
    name: string | undefined;
    /** A description for the role. */
    description?: string | undefined;
}

/** Models a role that will be updated on the server. */
export class UpdateRoleRequest implements IUpdateRoleRequest {
    /** A description for the role. */
    description?: string | undefined;

    constructor(data?: IUpdateRoleRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateRoleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        return data; 
    }
}

/** Models a role that will be updated on the server. */
export interface IUpdateRoleRequest {
    /** A description for the role. */
    description?: string | undefined;
}

/** Models an application user when retrieving a list. */
export class UserInfo implements IUserInfo {
    /** User's first name. */
    firstName?: string | undefined;
    /** User's last name. */
    lastName?: string | undefined;
    /** User's unique identifier. */
    id?: string | undefined;
    /** Indicates whether a user's email is confirmed or not. */
    emailConfirmed?: boolean;
    /** Indicates whether lockout feature is enabled for the user. */
    lockoutEnabled?: boolean;
    /** Indicates whether a user's phone number is confirmed or not. */
    phoneNumberConfirmed?: boolean;
    /** Indicates whether two-factor authentication is enabled for the user. */
    twoFactorEnabled?: boolean;
    /** The datetime where the user was created in the system. */
    createDate?: Date;
    /** The datetime where the lockout period ends. */
    lockoutEnd?: Date | undefined;
    /** User's email address. */
    email?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    /** The username. */
    userName?: string | undefined;

    constructor(data?: IUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.id = _data["id"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>undefined;
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): UserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["id"] = this.id;
        data["emailConfirmed"] = this.emailConfirmed;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["userName"] = this.userName;
        return data; 
    }
}

/** Models an application user when retrieving a list. */
export interface IUserInfo {
    /** User's first name. */
    firstName?: string | undefined;
    /** User's last name. */
    lastName?: string | undefined;
    /** User's unique identifier. */
    id?: string | undefined;
    /** Indicates whether a user's email is confirmed or not. */
    emailConfirmed?: boolean;
    /** Indicates whether lockout feature is enabled for the user. */
    lockoutEnabled?: boolean;
    /** Indicates whether a user's phone number is confirmed or not. */
    phoneNumberConfirmed?: boolean;
    /** Indicates whether two-factor authentication is enabled for the user. */
    twoFactorEnabled?: boolean;
    /** The datetime where the user was created in the system. */
    createDate?: Date;
    /** The datetime where the lockout period ends. */
    lockoutEnd?: Date | undefined;
    /** User's email address. */
    email?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    /** The username. */
    userName?: string | undefined;
}

export class UserInfoResultSet implements IUserInfoResultSet {
    count?: number;
    items?: UserInfo[] | undefined;

    constructor(data?: IUserInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserInfoResultSet {
    count?: number;
    items?: UserInfo[] | undefined;
}

/** Models a new user that will be created on the server. */
export class CreateUserRequest implements ICreateUserRequest {
    /** The first name of the user. */
    firstName?: string | undefined;
    /** The last name of the user. */
    lastName?: string | undefined;
    /** The username used to login. */
    userName?: string | undefined;
    /** The email of the user. */
    email?: string | undefined;
    /** The initial password of the user. */
    password?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;

    constructor(data?: ICreateUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): CreateUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["phoneNumber"] = this.phoneNumber;
        return data; 
    }
}

/** Models a new user that will be created on the server. */
export interface ICreateUserRequest {
    /** The first name of the user. */
    firstName?: string | undefined;
    /** The last name of the user. */
    lastName?: string | undefined;
    /** The username used to login. */
    userName?: string | undefined;
    /** The email of the user. */
    email?: string | undefined;
    /** The initial password of the user. */
    password?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
}

/** Models an application user when API provides info for a single user. */
export class SingleUserInfo implements ISingleUserInfo {
    /** User metadata expressed as claims. */
    claims?: ClaimInfo[] | undefined;
    /** The names of the roles that the user belongs to. */
    roles?: string[] | undefined;
    /** User's unique identifier. */
    id?: string | undefined;
    /** Indicates whether a user's email is confirmed or not. */
    emailConfirmed?: boolean;
    /** Indicates whether lockout feature is enabled for the user. */
    lockoutEnabled?: boolean;
    /** Indicates whether a user's phone number is confirmed or not. */
    phoneNumberConfirmed?: boolean;
    /** Indicates whether two-factor authentication is enabled for the user. */
    twoFactorEnabled?: boolean;
    /** The datetime where the user was created in the system. */
    createDate?: Date;
    /** The datetime where the lockout period ends. */
    lockoutEnd?: Date | undefined;
    /** User's email address. */
    email?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    /** The username. */
    userName?: string | undefined;

    constructor(data?: ISingleUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(ClaimInfo.fromJS(item));
            }
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            this.id = _data["id"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>undefined;
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): SingleUserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SingleUserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["id"] = this.id;
        data["emailConfirmed"] = this.emailConfirmed;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["userName"] = this.userName;
        return data; 
    }
}

/** Models an application user when API provides info for a single user. */
export interface ISingleUserInfo {
    /** User metadata expressed as claims. */
    claims?: ClaimInfo[] | undefined;
    /** The names of the roles that the user belongs to. */
    roles?: string[] | undefined;
    /** User's unique identifier. */
    id?: string | undefined;
    /** Indicates whether a user's email is confirmed or not. */
    emailConfirmed?: boolean;
    /** Indicates whether lockout feature is enabled for the user. */
    lockoutEnabled?: boolean;
    /** Indicates whether a user's phone number is confirmed or not. */
    phoneNumberConfirmed?: boolean;
    /** Indicates whether two-factor authentication is enabled for the user. */
    twoFactorEnabled?: boolean;
    /** The datetime where the user was created in the system. */
    createDate?: Date;
    /** The datetime where the lockout period ends. */
    lockoutEnd?: Date | undefined;
    /** User's email address. */
    email?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    /** The username. */
    userName?: string | undefined;
}

/** Models a claim. */
export class BasicClaimInfo implements IBasicClaimInfo {
    /** The type of the claim. */
    type?: string | undefined;
    /** The value of the claim. */
    value?: string | undefined;

    constructor(data?: IBasicClaimInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): BasicClaimInfo {
        data = typeof data === 'object' ? data : {};
        let result = new BasicClaimInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["value"] = this.value;
        return data; 
    }
}

/** Models a claim. */
export interface IBasicClaimInfo {
    /** The type of the claim. */
    type?: string | undefined;
    /** The value of the claim. */
    value?: string | undefined;
}

/** Models a user that will be updated on the server. */
export class UpdateUserRequest implements IUpdateUserRequest {
    /** Indicates whether lockout feature is enabled for the user. */
    lockoutEnabled?: boolean;
    /** Indicates whether two-factor authentication is enabled for the user. */
    twoFactorEnabled?: boolean;
    /** The datetime where the lockout period ends. */
    lockoutEnd?: Date | undefined;
    /** User's email address. */
    email?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    /** The username. */
    userName?: string | undefined;
    /** Dynamic claims that have been marked as required. */
    claims?: BasicClaimInfo[] | undefined;

    constructor(data?: IUpdateUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.userName = _data["userName"];
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(BasicClaimInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["userName"] = this.userName;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        return data; 
    }
}

/** Models a user that will be updated on the server. */
export interface IUpdateUserRequest {
    /** Indicates whether lockout feature is enabled for the user. */
    lockoutEnabled?: boolean;
    /** Indicates whether two-factor authentication is enabled for the user. */
    twoFactorEnabled?: boolean;
    /** The datetime where the lockout period ends. */
    lockoutEnd?: Date | undefined;
    /** User's email address. */
    email?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    /** The username. */
    userName?: string | undefined;
    /** Dynamic claims that have been marked as required. */
    claims?: BasicClaimInfo[] | undefined;
}

/** Models a system client that a user has given consent to or currently has IdentityServer side tokens for. */
export class UserClientInfo implements IUserClientInfo {
    /** Creation of grant. */
    createdAt?: Date;
    /** Expiration of grant. */
    expiresAt?: Date | undefined;
    /** Resources/scopes accessible by the application. */
    scopes?: string[] | undefined;
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Determines whether this application is enabled or not. */
    enabled?: boolean | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Specifies whether the client can be edited or not. */
    nonEditable?: boolean;

    constructor(data?: IUserClientInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.expiresAt = _data["expiresAt"] ? new Date(_data["expiresAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(item);
            }
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.description = _data["description"];
            this.enabled = _data["enabled"];
            this.requireConsent = _data["requireConsent"];
            this.allowRememberConsent = _data["allowRememberConsent"];
            this.logoUri = _data["logoUri"];
            this.clientUri = _data["clientUri"];
            this.nonEditable = _data["nonEditable"];
        }
    }

    static fromJS(data: any): UserClientInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserClientInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["expiresAt"] = this.expiresAt ? this.expiresAt.toISOString() : <any>undefined;
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["description"] = this.description;
        data["enabled"] = this.enabled;
        data["requireConsent"] = this.requireConsent;
        data["allowRememberConsent"] = this.allowRememberConsent;
        data["logoUri"] = this.logoUri;
        data["clientUri"] = this.clientUri;
        data["nonEditable"] = this.nonEditable;
        return data; 
    }
}

/** Models a system client that a user has given consent to or currently has IdentityServer side tokens for. */
export interface IUserClientInfo {
    /** Creation of grant. */
    createdAt?: Date;
    /** Expiration of grant. */
    expiresAt?: Date | undefined;
    /** Resources/scopes accessible by the application. */
    scopes?: string[] | undefined;
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Determines whether this application is enabled or not. */
    enabled?: boolean | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Specifies whether the client can be edited or not. */
    nonEditable?: boolean;
}

export class UserClientInfoResultSet implements IUserClientInfoResultSet {
    count?: number;
    items?: UserClientInfo[] | undefined;

    constructor(data?: IUserClientInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserClientInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserClientInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new UserClientInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserClientInfoResultSet {
    count?: number;
    items?: UserClientInfo[] | undefined;
}

/** Models a user claim that will be updated on the server. */
export class UpdateUserClaimRequest implements IUpdateUserClaimRequest {
    /** The value of the claim. */
    claimValue?: string | undefined;

    constructor(data?: IUpdateUserClaimRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.claimValue = _data["claimValue"];
        }
    }

    static fromJS(data: any): UpdateUserClaimRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserClaimRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["claimValue"] = this.claimValue;
        return data; 
    }
}

/** Models a user claim that will be updated on the server. */
export interface IUpdateUserClaimRequest {
    /** The value of the claim. */
    claimValue?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}